The python module multiplies takes two decimal number as input and prints the binary representation of their product using Booth's Algorithm.
Booth's algorithm for signed multiplication is used to multiply two binary number by minimizing additions and subtractions.

Input: two integers in the range [-2^15,2^15-1]
Output: 32 bit binary representation of the product.

Essentials:-
- M : 16 bit multiplicand
- Q : 16 bit number. Initialized to be multiplier
- A : 16 bit number initialized to be '0000000000000000' 
- q0 : single bit intitally '0'
- q1 : last bit of Q
- numq0 : 33 bit number formed by concatenation of A, Q and q0
- n : length of M 

Functions used :-
- to_bin(x) : returns 16 bit signed binary representation of integer x.

- two_comp(x) : returns 16 bit 2's complement representation of negative integer x. It uses shortcut method to find the 2's complement. Starting from the least significant bit, copy all the '0''s till you encounter the first '1' bit. Copy that '1' bit and then copy the complement of the remaining bits.

- right_shift(x) : arithmetic right shifts x. This is done by keeping the first bit same and then copying the whole number omitting the last bit. 
	Ex. right_shift('01010011') returns '00101001' .

- bin_add(a, b) : gives the binary sum of two 16 bit numbers a and b in 2's complement representation. Omits the overflow digits.

- bin_sub(a, b) : subtracts 16 bit numbers b from a in 2's complement representation and returns the difference in 16 bits. Omits the overflow digits.

